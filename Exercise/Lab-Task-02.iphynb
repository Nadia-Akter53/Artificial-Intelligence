{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "b1ae66d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Loops\n",
    "# Write a program to print numbers from 1 to 100 using all three loops (for, while, and doâ€“while).\n",
    "# Write a program to find the sum of the first N natural numbers.\n",
    "# Write a program to calculate the factorial of a given number.\n",
    "# Write a program to reverse a given number.\n",
    "# Write a program to count the number of digits and find the sum of digits in a given number.\n",
    "# Write a program to generate and display the multiplication table of any given number.\n",
    "# Write a program to print all even numbers between two given limits.\n",
    "# Write a program to check whether a given number is a Prime number.\n",
    "# Write a program to check whether a given number is a Perfect number.\n",
    "# Write a program to check whether a given number is a Strong number.\n",
    "# Write a program to check whether a given number is a Spy number.\n",
    "# Write a program to check whether a given number is an Armstrong number.\n",
    "# Write a program to check whether a given number is a Palindrome number.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "0ef7f65a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n"
     ]
    }
   ],
   "source": [
    "for i in range(1,10):\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "73b11972",
   "metadata": {},
   "outputs": [],
   "source": [
    "n = 5\n",
    "sum =0\n",
    "for i in range(1,10):\n",
    "    sum+=i\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "29fab3fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "45"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "79f00b6a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "90\n"
     ]
    }
   ],
   "source": [
    "n = 10\n",
    "fact =1\n",
    "for i in range(i, n+1):\n",
    "    fact*=i\n",
    "    \n",
    "print(fact)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "feddc42f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# n = 123\n",
    "# for i in range(n, 0, int(n/10)):\n",
    "#     print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "17d2705a",
   "metadata": {},
   "outputs": [],
   "source": [
    "n = 123\n",
    "rev=0\n",
    "\n",
    "for i in range(len(str(n))):\n",
    "    rem = n%10\n",
    "    rev = rev*10 + rem\n",
    "    n = int(n/10)\n",
    "   \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "0e98a0c0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "321"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rev"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "95361925",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Write a program to count the number of digits and find the sum of digits in a given number."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "252a9291",
   "metadata": {},
   "outputs": [],
   "source": [
    "n=145\n",
    "rev=0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "61e642e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "sum=0\n",
    "cnt=0\n",
    "\n",
    "for i in range(len(str(n))):\n",
    "    rem = n%10\n",
    "    \n",
    "    sum+=rem\n",
    "    n=int(n/10)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "de4e20f0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "f0cd78d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Write a program to generate and display the multiplication table of any given number."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "a4a961cd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1  x  7  =  7\n",
      "2  x  7  =  14\n",
      "3  x  7  =  21\n",
      "4  x  7  =  28\n",
      "5  x  7  =  35\n",
      "6  x  7  =  42\n",
      "7  x  7  =  49\n",
      "8  x  7  =  56\n",
      "9  x  7  =  63\n",
      "10  x  7  =  70\n"
     ]
    }
   ],
   "source": [
    "n=7\n",
    "for i in range(1,11):\n",
    "    print(i,\" x \",n, \" = \", i*n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "4e96a331",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Write a program to print all even numbers between two given limits."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "928ea54d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30\n",
      "32\n",
      "34\n",
      "36\n",
      "38\n",
      "40\n",
      "42\n",
      "44\n",
      "46\n",
      "48\n",
      "50\n",
      "52\n",
      "54\n",
      "56\n",
      "58\n",
      "60\n",
      "62\n",
      "64\n",
      "66\n",
      "68\n"
     ]
    }
   ],
   "source": [
    "low =30\n",
    "high = 70\n",
    "for i in range(low, high):\n",
    "    if i%2 == 0:\n",
    "        print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "b4cc1a87",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Write a program to check whether a given number is a Prime number."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "2b1edf1d",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def isPrime(n):\n",
    "    for i in range(2,n):\n",
    "        if n%i==0:\n",
    "            return False\n",
    "\n",
    "    return True\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "db0bc2dc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "isPrime(32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "9f813b79",
   "metadata": {},
   "outputs": [],
   "source": [
    "#  Write a program to check whether a given number is a Perfect number."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "8b1e5bf6",
   "metadata": {},
   "outputs": [],
   "source": [
    "def isPerfect(n):\n",
    "    sum=0\n",
    "    for i in range(1,n):\n",
    "        if n%i==0:\n",
    "            sum+=i\n",
    "     \n",
    "    if sum == n:\n",
    "        \n",
    "        return True    \n",
    "    else:\n",
    "        return False\n",
    "\n",
    "            \n",
    "            \n",
    "            \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "19ed0aee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "isPerfect(16)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "b9a760fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "isPerfect(6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "bd9d0352",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Write a program to check whether a given number is a Spy number."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "98338f1f",
   "metadata": {},
   "outputs": [],
   "source": [
    "def isSpy(n):\n",
    "    sum=0\n",
    "    mul=1\n",
    "    for i in range(len(str(n))):\n",
    "        rem = n%10\n",
    "        sum+=rem\n",
    "        mul*=rem\n",
    "        n = int(n/10)\n",
    "    if sum == mul:\n",
    "        return True \n",
    "    else:\n",
    "        return False\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "75bb8317",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "isSpy(48)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "f3ad5a05",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "isSpy(1412)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "cf42c09d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Write a program to check whether a given number is an Armstrong number."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "5fba1a29",
   "metadata": {},
   "outputs": [],
   "source": [
    "def isArmstrong(n):\n",
    "    sum=0\n",
    "    for i in range(len(str(n))):\n",
    "        rem = n%10\n",
    "        sum+= rem**3\n",
    "        \n",
    "        n = int(n/10)\n",
    "    if sum == n:\n",
    "        return True \n",
    "    else:\n",
    "        return False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "b94d06d9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "isArmstrong(709)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "69129dc3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Write a program to check whether a given number is a Palindrome number."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "be1dd0eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "def isPalindrome(n):\n",
    "    rev=0\n",
    "    actual_value = n\n",
    "\n",
    "    for i in range(len(str(n))):\n",
    "        rem = n%10\n",
    "        rev = rev*10 + rem\n",
    "        n = int(n/10)\n",
    "        \n",
    "    if actual_value == rev:\n",
    "        return True\n",
    "    else:\n",
    "        return False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "cce693ca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "isPalindrome(12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "1a26b327",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "isPalindrome(121)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "79df67ab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "isPalindrome(2222)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8b28f321",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
